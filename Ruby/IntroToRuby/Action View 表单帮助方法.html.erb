



1 编写简单的表单
# 最基本的表单帮助方法是 form_tag。
<%= form_tag do %>
  Form contents
<% end %>


1.1 普通的搜索表单
# 在网上见到最多的表单是搜索表单，搜索表单包含以下元素：

form 元素，action 属性值为 GET；
输入框的 label 元素；
文本输入框 ；
提交按钮；

# 创建这样一个表单要分别使用帮助方法 form_tag、label_tag、text_field_tag 和 submit_tag，如下所示：

# <%= form_tag("/search", method: "get") do %>
# 	<%= label_tag(:q, "Search for:") %>
# 	<%= text_field_tag(:q) %>
# 	<%= submit_tag("Search") %>
# <% end %>


1.2 调用 form_tag 时使用多个 Hash 参数

form_tag(controller: "people", action: "search", method: "get", class: "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search?method=get&class=nifty_form" method="post">'

1.3 生成表单中控件的帮助方法
1.3.1 复选框

# 复选框是一种表单控件，给用户一些选项，可用于启用或禁用某项功能。
# <%= check_box_tag(:pet_dog) %>
# <%= label_tag(:pet_dog, "I own a dog") %>
# <%= check_box_tag(:pet_cat) %>
# <%= label_tag(:pet_cat, "I own a cat") %>
# 生成的 HTML 如下：

# <input id="pet_dog" name="pet_dog" type="checkbox" value="1" />
# <label for="pet_dog">I own a dog</label>
# <input id="pet_cat" name="pet_cat" type="checkbox" value="1" />
# <label for="pet_cat">I own a cat</label>

check_box_tag 方法的第一个参数是 name 属性的值。第二个参数是 value 属性的值。选中复选框后，value 属性的值会包含在提交的表单数据中，因此可以通过 params 获取。

1.3.2 单选框

单选框有点类似复选框，但是各单选框之间是互斥的，只能选择一组中的一个：

# <%= radio_button_tag(:age, "child") %>
# <%= label_tag(:age_child, "I am younger than 21") %>
# <%= radio_button_tag(:age, "adult") %>
# <%= label_tag(:age_adult, "I'm over 21") %>
生成的 HTML 如下：

# <input id="age_child" name="age" type="radio" value="child" />
# <label for="age_child">I am younger than 21</label>
# <input id="age_adult" name="age" type="radio" value="adult" />
# <label for="age_adult">I'm over 21</label>
# 和 check_box_tag 方法一样，radio_button_tag 方法的第二个参数也是 value 属性的值。因为两个单选框的 name 属性值一样（都是 age），所以用户只能选择其中一个单选框，params[:age] 的值不是 "child" 就是 "adult"。

1.4 其他帮助方法
# 其他值得说明的表单控件包括：多行文本输入框，密码输入框，隐藏输入框，搜索关键字输入框，电话号码输入框，日期输入框，时间输入框，颜色输入框，日期时间输入框，本地日期时间输入框，月份输入框，星期输入框，URL 地址输入框，Email 地址输入框，数字输入框和范围输入框：

# <%= text_area_tag(:message, "Hi, nice site", size: "24x6") %>
# <%= password_field_tag(:password) %>
# <%= hidden_field_tag(:parent_id, "5") %>
# <%= search_field(:user, :name) %>
# <%= telephone_field(:user, :phone) %>
# <%= date_field(:user, :born_on) %>
# <%= datetime_field(:user, :meeting_time) %>
# <%= datetime_local_field(:user, :graduation_day) %>
# <%= month_field(:user, :birthday_month) %>
# <%= week_field(:user, :birthday_week) %>
# <%= url_field(:user, :homepage) %>
# <%= email_field(:user, :address) %>
# <%= color_field(:user, :favorite_color) %>
# <%= time_field(:task, :started_at) %>
# <%= number_field(:product, :price, in: 1.0..20.0, step: 0.5) %>
# <%= range_field(:product, :discount, in: 1..100) %>



2 处理模型对象
2.1 模型对象帮助方法
text_field 和 text_area。
# <%= text_field(:person, :name) %>

2.2 把表单绑定到对象上
form_for 帮助方法就是为此而生。

假设有个用来处理文章的控制器 app/controllers/articles_controller.rb：

def new
  @article = Article.new
end
在 new 动作对应的视图 app/views/articles/new.html.erb 中可以像下面这样使用 form_for 方法：

# <%= form_for @article, url: {action: "create"}, html: {class: "nifty_form"} do |f| %>
#   <%= f.text_field :title %>
#   <%= f.text_area :body, size: "60x12" %>
#   <%= f.submit "Create" %>
# <% end %>


2.3 记录辨别技术
用户可以直接处理程序中的 Article 模型，根据开发 Rails 的最佳实践，应该将其视为一个资源：

resources :articles


2.3.1 处理命名空间

如果在路由中使用了命名空间，form_for 方法也有相应的简写形式。如果程序中有个 admin 命名空间，表单可以写成：

form_for [:admin, @article]



2.4 表单如何处理 PATCH，PUT 或 DELETE 请求？
Rails 框架建议使用 REST 架构设计程序，因此除了 GET 和 POST 请求之外，还要处理 PATCH 和 DELETE 请求。但是大多数浏览器不支持从表单中提交 GET 和 POST 之外的请求。

为了解决这个问题，Rails 使用 POST 请求进行模拟，并在表单中加入一个名为 _method 的隐藏字段，其值表示真正希望使用的请求方法：

form_tag(search_path, method: "patch")




3 快速创建选择列表
3.1 select 和 option 标签
3.2 处理模型的选择列表
3.3 根据任意对象组成的集合创建 option 标签
3.4 时区和国家选择列表




4 使用日期和时间表单帮助方法

4.1 独立的帮助方法
select_* 这类帮助方法的第一个参数是 Date、Time 或 DateTime 类的实例，并选中指定的日期时间。如果不指定，就使用当前日期时间。例如：

# <%= select_date Date.today, prefix: :start_date %>

4.2 处理模型对象的帮助方法
select_date 方法在更新或创建 Active Record 对象的表单中有点力不从心，因为 Active Record 期望 params 中的每个元素都对应一个属性。用于处理模型对象的日期和时间帮助方法会提交一个名字特殊的参数，Active Record 看到这个参数时就知道必须和其他参数结合起来传递给字段类型对应的构造方法。例如：

# <%= date_select :person, :birth_date %>


5 上传文件


6 定制表单构造器






7 理解参数命名约定




8 处理外部资源的表单






9 编写复杂的表单
9.1 设置模型
9.2 嵌套表单
9.3 控制器端
9.4 删除对象
9.5 避免创建空记录
9.6 按需添加字段





















































































































































































