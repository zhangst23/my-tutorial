/ CSS预处理器sass的学习.sass

/ 1.0
/ 首先安装Ruby环境
gem install sass

/ 2.0
/ SASS文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。
/ 下面的命令，可以在屏幕上显示.scss文件转化的css代码。（假设文件名为test。）

/ 使用:
    sass test.scss

/ 如果要将显示结果保存成文件，后面再跟一个.css文件名。
	sass test.scss test.css


/ SASS提供四个编译风格的选项：
/ 　　* nested：嵌套缩进的css代码，它是默认值。
/ 　　* expanded：没有缩进的、扩展的css代码。
/ 　　* compact：简洁格式的css代码。
/ 　　* compressed：压缩后的css代码。


/ 生产环境当中，一般使用最后一个选项。
　　sass --style compressed test.sass test.css

/ 你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。

/ watch a file
   sass --watch input.scss:output.css
/ watch a directiry
   sass --watch app/sass:public/stylesheets


/ 3.1 变量
   $blue : #1875e7
   
   div{
   	color : $blue;
   }

/ 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。
　　$side : left;
　　.rounded {
　　　　border-#{$side}-radius: 5px;
　　}

/ 3.2 计算功能
　　body {
　　　　margin: (14px/2);
　　　　top: 50px + 100px;
　　　　right: $var * 10%;
　　}
/ 3.3 嵌套

　　div h1 {
　　　　color : red;
　　}
/ 可以写成：
　　div {
　　　　hi {
　　　　　　color:red;
　　　　}
　　}
/ 属性也可以嵌套，比如border-color属性，可以写成：
　　p {
　　　　border: {
　　　　　　color: red;
　　　　}
　　}
/ 注意，border后面必须加上冒号。
/ 在嵌套的代码块内，可以使用&引用父元素。比如a:hover伪类，可以写成：
　　a {
　　　　&:hover { color: #ffb3ff; }
　　}



/ 4.1继承
	.class1 {
		border:1px solid #ddd;
	}

	.class2{
		@extend .class1;
		font-size:120%;
	}

/ 4.2 Mixin
/ 使用@mixin命令，定义一个代码块。
　　@mixin left {
　　　　float: left;
　　　　margin-left: 10px;
　　}
/ 使用@include命令，调用这个mixin。
　　div {
　　　　@include left;
　　}
/ mixin的强大之处，在于可以指定参数和缺省值。
　　@mixin left($value: 10px) {
　　　　float: left;
　　　　margin-right: $value;
　　}
/ 使用的时候，根据需要加入参数：
　　div {
　　　　@include left(20px);
　　}
/ 下面是一个mixin的实例，用来生成浏览器前缀。
　　@mixin rounded($vert, $horz, $radius: 10px) {
　　　　border-#{$vert}-#{$horz}-radius: $radius;
　　　　-moz-border-radius-#{$vert}#{$horz}: $radius;
　　　　-webkit-border-#{$vert}-#{$horz}-radius: $radius;
　　}
/ 使用的时候，可以像下面这样调用：
　　#navbar li { @include rounded(top, left); }
　　#footer { @include rounded(top, left, 5px); }



/ 4.3 插入文件
/ @import命令，插入外部文件
@import "path/filename.scss";
/ 等同于css的import命令
@import "foo.css"

/ 5.1条件语句
/ @if 可以用来判断
	p{
		@if 1 + 1 == 2 { border:1px solid; }
		@if 5 < 3 { border:2px dotted; }
	}
/ 配套的还有@else命令：
@if lightness($color) > 30% {
	background-color:#000;
} @else {
	background-color:#fff;
}


/ 5.2循环
/ for
@for $i from 1 to 10 {
	.border-#{$i}{
		border:#{$i}px solid blue;
	}
}

/ while循环：
　　$i: 6;
　　@while $i > 0 {
　　　　.item-#{$i} { width: 2em * $i; }
　　　　$i: $i - 2;
　　}
/ each命令，作用与for类似：
　　@each $member in a, b, c, d {
　　　　.#{$member} {
　　　　　　background-image: url("/image/#{$member}.jpg");
　　　　}
　　}


/ 5.3 自定义函数
/ SASS允许用户编写自己的函数。
　　@function double($n) {
　　　　@return $n * 2;
　　}
　　#sidebar {
　　　　width: double(5px);
　　}

/ 6.1
/ @media 指令有点类似 JS 的冒泡功能一样，如果在样式中使用 ，它将冒泡到外面。


.sidebar {
  width: 300px;
  @media screen and (orientation: landscape) {
    width: 500px;
  }
}
/ 编译出来：

.sidebar {
  width: 300px; }
  @media screen and (orientation: landscape) {
    .sidebar {
      width: 500px; } }

































